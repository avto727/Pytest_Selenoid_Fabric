{"report": {"environment": {"Python": "3.8.0", "Platform": "Linux-4.9.0-6-amd64-x86_64-with-glibc2.17"}, "tests": [{"name": "tests/test_2.py::TestGoogleHomePageTwo::test_navigate_to_home_page_2[chrome]", "duration": 69.9181137084961, "run_index": 0, "setup": {"name": "setup", "duration": 31.879525899887085, "outcome": "passed"}, "call": {"name": "call", "duration": 6.104977607727051, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.05408430099487305, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/test_2.py::TestGoogleHomePageTwo::test_navigate_to_home_page_2[chrome_62]", "duration": 122.13370251655579, "run_index": 1, "setup": {"name": "setup", "duration": 56.73894214630127, "outcome": "passed"}, "call": {"name": "call", "duration": 8.602097272872925, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.053720951080322266, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/test_2.py::TestGoogleHomePageTwo::test_navigate_to_home_page_2[firefox]", "duration": 166.09393668174744, "run_index": 2, "setup": {"name": "setup", "duration": 83.04678893089294, "outcome": "error", "longrepr": "request = <SubRequest 'create_driver' for <Function test_navigate_to_home_page_2[firefox]>>\n\n    @pytest.fixture(params=[\"chrome_62\",\"chrome\",\"firefox\"], scope=\"class\")\n    def create_driver(request):\n        __config = ConfigSetup()\n        url = __config.get_base_url()\n        if request.param == \"chrome\":\n            capabilities = {\n                \"browserName\": \"chrome\",\n                \"version\": \"61.0\",\n                \"enableVNC\": True,\n                \"enableVideo\": True\n            }\n        if request.param == \"firefox\":\n            capabilities = {\n                \"browserName\": \"firefox\",\n                \"enableVNC\": True,\n                \"enableVideo\": True,\n                \"version\": \"47.0\"\n            }\n    \n        if request.param == \"chrome_62\":\n            capabilities = {\n                \"browserName\": \"chrome\",\n                \"enableVNC\": True,\n                \"enableVideo\": True,\n                \"version\": \"62.0\"\n            }\n    \n>       web_driver = webdriver.Remote(\n                command_executor=\"http://localhost:4444/wd/hub\",\n                desired_capabilities=capabilities)\n\nconftest.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv3/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\n../venv3/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../venv3/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7faac87ab2b0>, response = {'status': 500, 'value': '{\"status\":13,\"value\":{\"message\":\"New session attempts retry count exceeded\"}}\\n'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: New session attempts retry count exceeded\n\n../venv3/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: WebDriverException"}, "teardown": {"name": "teardown", "duration": 0.00035881996154785156, "outcome": "passed"}, "outcome": "error"}], "summary": {"passed": 2, "error": 1, "num_tests": 3, "duration": 84.72945666313171}, "created_at": "2019-11-26 22:19:19.456750"}}